// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stringservice.proto

/*
Package stringservice is a generated protocol buffer package.

It is generated from these files:
	stringservice.proto

It has these top-level messages:
	Empty
	LargeString
*/
package stringservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LargeString struct {
	StringList []string `protobuf:"bytes,1,rep,name=string_list,json=stringList" json:"string_list,omitempty"`
}

func (m *LargeString) Reset()                    { *m = LargeString{} }
func (m *LargeString) String() string            { return proto.CompactTextString(m) }
func (*LargeString) ProtoMessage()               {}
func (*LargeString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LargeString) GetStringList() []string {
	if m != nil {
		return m.StringList
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "stringservice.Empty")
	proto.RegisterType((*LargeString)(nil), "stringservice.LargeString")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StringService service

type StringServiceClient interface {
	GetLargeString(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LargeString, error)
}

type stringServiceClient struct {
	cc *grpc.ClientConn
}

func NewStringServiceClient(cc *grpc.ClientConn) StringServiceClient {
	return &stringServiceClient{cc}
}

func (c *stringServiceClient) GetLargeString(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LargeString, error) {
	out := new(LargeString)
	err := grpc.Invoke(ctx, "/stringservice.StringService/GetLargeString", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StringService service

type StringServiceServer interface {
	GetLargeString(context.Context, *Empty) (*LargeString, error)
}

func RegisterStringServiceServer(s *grpc.Server, srv StringServiceServer) {
	s.RegisterService(&_StringService_serviceDesc, srv)
}

func _StringService_GetLargeString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServiceServer).GetLargeString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringservice.StringService/GetLargeString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServiceServer).GetLargeString(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _StringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stringservice.StringService",
	HandlerType: (*StringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLargeString",
			Handler:    _StringService_GetLargeString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stringservice.proto",
}

func init() { proto.RegisterFile("stringservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x2e, 0x29, 0xca,
	0xcc, 0x4b, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x45, 0x11, 0x54, 0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x54, 0xd2, 0xe3, 0xe2,
	0xf6, 0x49, 0x2c, 0x4a, 0x4f, 0x0d, 0x06, 0x4b, 0x0b, 0xc9, 0x73, 0x71, 0x43, 0x14, 0xc6, 0xe7,
	0x64, 0x16, 0x97, 0x48, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0x71, 0x41, 0x84, 0x7c, 0x32, 0x8b,
	0x4b, 0x8c, 0x42, 0xb9, 0x78, 0x21, 0x4a, 0x83, 0x21, 0x26, 0x09, 0xb9, 0x70, 0xf1, 0xb9, 0xa7,
	0x96, 0x20, 0x9b, 0x21, 0xa2, 0x87, 0xea, 0x00, 0xb0, 0x45, 0x52, 0x52, 0x68, 0xa2, 0x48, 0x3a,
	0x94, 0x18, 0x9c, 0x64, 0xb8, 0x24, 0x32, 0xf3, 0xf5, 0x0a, 0x12, 0xf3, 0xb2, 0xf3, 0xf3, 0x12,
	0x51, 0x55, 0x06, 0x30, 0x26, 0xb1, 0x81, 0xfd, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd4,
	0xb3, 0xbd, 0xde, 0xda, 0x00, 0x00, 0x00,
}
